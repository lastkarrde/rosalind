from Bio import motifs
from Bio.Seq import Seq
from Bio.Alphabet import IUPAC

S = 'CATAAGCTAGAAGCTAGAAGCTAGAAGCTAGGACTAAAGCTAGGTTTTCGCTGAAGCTAGAAGCTAGAGAAGCTAGTTAAGCTAGTTGAAGCTAGCAAGCTAGAAGCTAGGAAGCTAGAAGCTAGTCTTAAGCTAGATAGATCCGTCGAAGCTAGAAGCTAGAGGTAAAGCTAGGCCAAGCTAGATAAGCTAGGAAAGCTAGAAGCTAGAAGCTAGCACGTATCTAGTCAAGCTAGACTTCCCTAAGCTAGTAAGACAAGCTAGAAGCTAGATCCATAAGCTAGAAGCTAGGCAAGCTAGAAGCTAGTATAAGCTAGGCGCCTGAAGCTAGCCTGCTAAGCTAGAAGCTAGTAAAAAGCTAGACTGTAAGAAGCTAGAGAAGCTAGAAGCTAGTTTACAAGCTAGCAAGCTAGTATGTGTAGTTTCAAGCTAGCCAAGCTAGCAAAGCTAGTAAAGCTAGAAGCTAGGCAAGCTAGTTAAGCTAGACATAAAGCTAGTTAAGCTAGTGAAGCTAGGCTCTTGCAAGCTAGACCAAGCTAGGGAAGCTAGCGGCAAGCTAGATTCAAGCTAGAAGCTAGTAGGAAGCTAGCGAGAAGCTAGGCGACTTGCAAGCTAGATAAGCTAGAAGCTAGTAAAGCTAGTAAGCTAGGAAGCTAGAATTACAAAGCTAGAAGCTAGCAAAGCTAGCTCTGCCGAAGCTAGAAGCTAGGATAAGCTAGAAGAAGCTAGGCATCCAGCGAAAGCTAGTGAAGCTAGAAGAAGCTAGGAAGCTAGAAGCTAGTCAAGCTAGAAGCTAGTTGATATAAGCTAGAAGCTAGAAGCTAGACGGTTTGCAGAAGCTAGCCAAGCTAGAAGCTAGAAGCTAGATCGTAAGCTAGCTGCTGAAGCTAG'
T = 'AAGCTAGAA'

def find_locations(sequence: str, motif: str) -> str:
    """
    Finds all index locations of the string motif within the string sequence.
    """

    seq = Seq(sequence, IUPAC.unambiguous_rna)
    m = motifs.create([motif])

    locations = [str(idx + 1) for idx, seq in m.instances.search(seq)]

    return ' '.join(locations)

assert find_locations('GATATATGCATATACTT', 'ATAT') == '2 4 10'
assert find_locations(S, T) == '4 11 18 54 97 112 149 196 203 258 278 294 338 380 454 565 619 651 665 696 713 750 768 784 805 812 846 853'
